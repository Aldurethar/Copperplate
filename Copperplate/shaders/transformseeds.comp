#version 460 core
struct inputSeed{
	vec3 pos;
	float importance;
};

struct outputSeed{
	vec2 pos;
	float importance;
	int keep;
};

layout(std140, binding = 0) buffer seedsIn {
	inputSeed iSeeds[];
};

layout(std140, binding = 1) buffer seedsOut {
	outputSeed oSeeds[];
};

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

const float depthBias = 1e-4;

uniform sampler2D Depth;

uniform float numSeeds;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main(){
	uint gid = gl_GlobalInvocationID.x;

	if (gid < numSeeds){
		vec4 clipPos = projection * view * model * vec4(iSeeds[gid].pos, 1.0);
		vec2 screenPos = ((clipPos.xy / clipPos.w) * 0.5) + vec2(0.5);
		int inbounds = 1;
		if(screenPos.x < 0.0 || screenPos.x > 1.0) inbounds = 0;
		if(screenPos.y < 0.0 || screenPos.y > 1.0) inbounds = 0;

		float depth = clipPos.z * 0.5 + 0.5;

		float testDepth = texture(Depth, screenPos).r;
		int keep;
		if (depth <= (testDepth + depthBias)) keep = 1;
		else keep = 0;

		oSeeds[gid].pos = screenPos;
		oSeeds[gid].importance = iSeeds[gid].importance;
		oSeeds[gid].keep = keep * inbounds;
	} else {
		oSeeds[gid].pos = vec2(0.0);
		oSeeds[gid].importance = 0.0;
		oSeeds[gid].keep = 0;
	}
}